# this typemap is only used by xsubpp
# to marshal THIS in xs code
QDBusError *                            		T_PTROBJ_0000
QVariantComparisonHelper *              		T_PTROBJ_0001
QDBusInterface *                        		T_PTROBJ_0002
QDBusPendingReplyData *                 		T_PTROBJ_0003
QDBusArgument *                         		T_PTROBJ_0004
QDBusObjectPath *                       		T_PTROBJ_0005
QDBusContext *                          		T_PTROBJ_0006
QDBusPendingCallWatcher *               		T_PTROBJ_0007
QDBusVariant *                          		T_PTROBJ_0008
QDBusMetaType *                         		T_PTROBJ_0009
QDBusConnectionInterface *              		T_PTROBJ_0010
QDBusPendingCall *                      		T_PTROBJ_0011
QDBusServer *                           		T_PTROBJ_0012
QVariant::PrivateShared *               		T_PTROBJ_0013
QVariant *                              		T_PTROBJ_0014
QDBusAbstractInterfaceBase *            		T_PTROBJ_0015
QDBusSignature *                        		T_PTROBJ_0016
QDBusAbstractAdaptor *                  		T_PTROBJ_0017
QDBusMessage *                          		T_PTROBJ_0018
QDBusAbstractInterface *                		T_PTROBJ_0019
QVariant::Private *                     		T_PTROBJ_0020
QDBusServiceWatcher *                   		T_PTROBJ_0021
QDBusConnection *                       		T_PTROBJ_0022
T000 *                                  		T_PTROBJ_0023
T001 *                                  		T_PTROBJ_0024
T002 *                                  		T_PTROBJ_0025

################################################################
INPUT
T_PTROBJ_0000
    if (sv_derived_from($arg, \"Qt::DBus::QDBusError\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::DBus::QDBusError\");

T_PTROBJ_0001
    if (sv_derived_from($arg, \"Qt::Core::QVariantComparisonHelper\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Core::QVariantComparisonHelper\");

T_PTROBJ_0002
    if (sv_derived_from($arg, \"Qt::DBus::QDBusInterface\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::DBus::QDBusInterface\");

T_PTROBJ_0003
    if (sv_derived_from($arg, \"Qt::DBus::QDBusPendingReplyData\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::DBus::QDBusPendingReplyData\");

T_PTROBJ_0004
    if (sv_derived_from($arg, \"Qt::DBus::QDBusArgument\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::DBus::QDBusArgument\");

T_PTROBJ_0005
    if (sv_derived_from($arg, \"Qt::DBus::QDBusObjectPath\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::DBus::QDBusObjectPath\");

T_PTROBJ_0006
    if (sv_derived_from($arg, \"Qt::DBus::QDBusContext\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::DBus::QDBusContext\");

T_PTROBJ_0007
    if (sv_derived_from($arg, \"Qt::DBus::QDBusPendingCallWatcher\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::DBus::QDBusPendingCallWatcher\");

T_PTROBJ_0008
    if (sv_derived_from($arg, \"Qt::DBus::QDBusVariant\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::DBus::QDBusVariant\");

T_PTROBJ_0009
    if (sv_derived_from($arg, \"Qt::DBus::QDBusMetaType\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::DBus::QDBusMetaType\");

T_PTROBJ_0010
    if (sv_derived_from($arg, \"Qt::DBus::QDBusConnectionInterface\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::DBus::QDBusConnectionInterface\");

T_PTROBJ_0011
    if (sv_derived_from($arg, \"Qt::DBus::QDBusPendingCall\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::DBus::QDBusPendingCall\");

T_PTROBJ_0012
    if (sv_derived_from($arg, \"Qt::DBus::QDBusServer\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::DBus::QDBusServer\");

T_PTROBJ_0013
    if (sv_derived_from($arg, \"Qt::Core::QVariant::PrivateShared\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Core::QVariant::PrivateShared\");

T_PTROBJ_0014
    if (sv_derived_from($arg, \"Qt::Core::QVariant\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Core::QVariant\");

T_PTROBJ_0015
    if (sv_derived_from($arg, \"Qt::DBus::QDBusAbstractInterfaceBase\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::DBus::QDBusAbstractInterfaceBase\");

T_PTROBJ_0016
    if (sv_derived_from($arg, \"Qt::DBus::QDBusSignature\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::DBus::QDBusSignature\");

T_PTROBJ_0017
    if (sv_derived_from($arg, \"Qt::DBus::QDBusAbstractAdaptor\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::DBus::QDBusAbstractAdaptor\");

T_PTROBJ_0018
    if (sv_derived_from($arg, \"Qt::DBus::QDBusMessage\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::DBus::QDBusMessage\");

T_PTROBJ_0019
    if (sv_derived_from($arg, \"Qt::DBus::QDBusAbstractInterface\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::DBus::QDBusAbstractInterface\");

T_PTROBJ_0020
    if (sv_derived_from($arg, \"Qt::Core::QVariant::Private\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::Core::QVariant::Private\");

T_PTROBJ_0021
    if (sv_derived_from($arg, \"Qt::DBus::QDBusServiceWatcher\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::DBus::QDBusServiceWatcher\");

T_PTROBJ_0022
    if (sv_derived_from($arg, \"Qt::DBus::QDBusConnection\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::DBus::QDBusConnection\");

T_PTROBJ_0023
    if (sv_derived_from($arg, \"Qt::DBus::Template::T000\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::DBus::Template::T000\");

T_PTROBJ_0024
    if (sv_derived_from($arg, \"Qt::DBus::Template::T001\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::DBus::Template::T001\");

T_PTROBJ_0025
    if (sv_derived_from($arg, \"Qt::DBus::Template::T002\"))
        $var = reinterpret_cast<$type>(SvIV((SV*)SvRV($arg)));
    else
        Perl_croak(aTHX_ \"$var is not of type Qt::DBus::Template::T002\");


################################################################
OUTPUT
T_PTROBJ_0000
    sv_setref_pv($arg, \"Qt::DBus::QDBusError\", (void *)$var);

T_PTROBJ_0001
    sv_setref_pv($arg, \"Qt::Core::QVariantComparisonHelper\", (void *)$var);

T_PTROBJ_0002
    sv_setref_pv($arg, \"Qt::DBus::QDBusInterface\", (void *)$var);

T_PTROBJ_0003
    sv_setref_pv($arg, \"Qt::DBus::QDBusPendingReplyData\", (void *)$var);

T_PTROBJ_0004
    sv_setref_pv($arg, \"Qt::DBus::QDBusArgument\", (void *)$var);

T_PTROBJ_0005
    sv_setref_pv($arg, \"Qt::DBus::QDBusObjectPath\", (void *)$var);

T_PTROBJ_0006
    sv_setref_pv($arg, \"Qt::DBus::QDBusContext\", (void *)$var);

T_PTROBJ_0007
    sv_setref_pv($arg, \"Qt::DBus::QDBusPendingCallWatcher\", (void *)$var);

T_PTROBJ_0008
    sv_setref_pv($arg, \"Qt::DBus::QDBusVariant\", (void *)$var);

T_PTROBJ_0009
    sv_setref_pv($arg, \"Qt::DBus::QDBusMetaType\", (void *)$var);

T_PTROBJ_0010
    sv_setref_pv($arg, \"Qt::DBus::QDBusConnectionInterface\", (void *)$var);

T_PTROBJ_0011
    sv_setref_pv($arg, \"Qt::DBus::QDBusPendingCall\", (void *)$var);

T_PTROBJ_0012
    sv_setref_pv($arg, \"Qt::DBus::QDBusServer\", (void *)$var);

T_PTROBJ_0013
    sv_setref_pv($arg, \"Qt::Core::QVariant::PrivateShared\", (void *)$var);

T_PTROBJ_0014
    sv_setref_pv($arg, \"Qt::Core::QVariant\", (void *)$var);

T_PTROBJ_0015
    sv_setref_pv($arg, \"Qt::DBus::QDBusAbstractInterfaceBase\", (void *)$var);

T_PTROBJ_0016
    sv_setref_pv($arg, \"Qt::DBus::QDBusSignature\", (void *)$var);

T_PTROBJ_0017
    sv_setref_pv($arg, \"Qt::DBus::QDBusAbstractAdaptor\", (void *)$var);

T_PTROBJ_0018
    sv_setref_pv($arg, \"Qt::DBus::QDBusMessage\", (void *)$var);

T_PTROBJ_0019
    sv_setref_pv($arg, \"Qt::DBus::QDBusAbstractInterface\", (void *)$var);

T_PTROBJ_0020
    sv_setref_pv($arg, \"Qt::Core::QVariant::Private\", (void *)$var);

T_PTROBJ_0021
    sv_setref_pv($arg, \"Qt::DBus::QDBusServiceWatcher\", (void *)$var);

T_PTROBJ_0022
    sv_setref_pv($arg, \"Qt::DBus::QDBusConnection\", (void *)$var);

T_PTROBJ_0023
    sv_setref_pv($arg, \"Qt::DBus::Template::T000\", (void *)$var);

T_PTROBJ_0024
    sv_setref_pv($arg, \"Qt::DBus::Template::T001\", (void *)$var);

T_PTROBJ_0025
    sv_setref_pv($arg, \"Qt::DBus::Template::T002\", (void *)$var);

